[build-system]
requires = ["setuptools", "lsst-versions >= 1.3.0"]
build-backend = "setuptools.build_meta"

[project]
name = "lsst-pipe-base"
requires-python = ">=3.11.0"
description = "Pipeline infrastructure for the Rubin Science Pipelines."
license = {text = "BSD 3-Clause License"}
readme = "README.md"
authors = [
    {name="Rubin Observatory Data Management", email="dm-admin@lists.lsst.org"},
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Astronomy",
]
keywords=["lsst"]
dependencies = [
    "lsst-resources [s3]",
    "lsst-utils",
    "lsst-daf-butler",
    "lsst-pex-config",
    "astropy",
    "pydantic >=2,<3.0",
    "networkx",
    "pyyaml >= 5.1",
    "numpy >= 1.17",
    "frozendict",
]

dynamic = ["version"]

[project.entry-points.'butler.cli']
pipe_base = "lsst.pipe.base.cli:get_cli_subcommands"

[project.urls]
"Homepage" = "https://github.com/lsst/pipe_base"

[project.optional-dependencies]
test = ["pytest >= 3.2"]
mermaid = ["mermaid"]

[tool.setuptools.packages.find]
where = ["python"]

[tool.setuptools]
zip-safe = true
license-files = ["COPYRIGHT", "LICENSE", "bsd_license.txt", "gpl-v3.0.txt"]

[tool.setuptools.package-data]
"lsst.pipe.base" = ["py.typed", "cli/resources.yaml"]

[tool.setuptools.dynamic]
version = { attr = "lsst_versions.get_lsst_version" }

[tool.towncrier]
    package = "lsst.pipe.base"
    package_dir = "python"
    filename = "doc/lsst.pipe.base/CHANGES.rst"
    directory = "doc/changes"
    title_format = "lsst-pipe-base {version} ({project_date})"
    issue_format = "`{issue} <https://rubinobs.atlassian.net/browse/{issue}>`_"


    [[tool.towncrier.type]]
        directory = "feature"
        name = "New Features"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "api"
        name = "API Changes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "bugfix"
        name = "Bug Fixes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "perf"
        name = "Performance Enhancement"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "misc"
        name = "Other Changes and Additions"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "removal"
        name = "An API Removal or Deprecation"
        showcontent = true

[tool.black]
line-length = 110
target-version = ["py311"]

[tool.isort]
profile = "black"
line_length = 110
known_first_party = ["lsst"]

[tool.lsst_versions]
write_to = "python/lsst/pipe/base/version.py"

[tool.pytest.ini_options]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pydocstyle]
convention = "numpy"
# Our coding style does not require docstrings for magic methods (D105)
# Our docstyle documents __init__ at the class level (D107)
# We allow methods to inherit docstrings and this is not compatible with D102.
# Docstring at the very first line is not required
# D200, D205 and D400 all complain if the first sentence of the docstring does
# not fit on one line.
# Do not require docstrings in __init__.py files (D104)
add-ignore = ["D107", "D105", "D102", "D100", "D200", "D205", "D400", "D104"]

[tool.ruff]
line-length = 110
target-version = "py311"
exclude = [
    "__init__.py",
]
[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 79

[tool.ruff.lint]
ignore = [
    "N802",
    "N803",
    "N806",
    "N812",
    "N815",
    "N816",
    "N999",
    "D107",
    "D105",
    "D102",
    "D104",
    "D100",
    "D200",
    "D205",
    "D400",
]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "N",  # pep8-naming
    "W",  # pycodestyle
    "D",  # pydocstyle
    "I",  # isort
    "RUF022",  # sort __all__
    "UP",  # pyupgrade
]

[tool.ruff.lint.isort]
known-first-party = ["lsst"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
# Do not need to add class docs to the example classes.
"doc/_static/pipe_base/PipelineTask_Examples/*.py" = ["D101"]

[tool.numpydoc_validation]
checks = [
    "all",  # All except the rules listed below.
    "SA01",  # See Also section.
    "SA04",  # We don't use descriptions with See Also.
    "EX01",  # Example section.
    "SS06",  # Summary can go into second line.
    "GL01",  # Summary text can start on same line as """
    "GL08",  # Do not require docstring.
    "ES01",  # No extended summary required.
    "RT01",  # Unfortunately our @property trigger this.
    "RT02",  # Does not want named return value. DM style says we do.
    "SS05",  # pydocstyle is better at finding infinitive verb.
]
exclude = [
    '^__init__$',
    "^test_.*",  # Do not test docstrings in test code.
    '^commands\.',  # Click docstrings, not numpydoc
    '\._[a-zA-Z_]+$',  # Private methods.
]
